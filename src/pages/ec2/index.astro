---
import { getCollection } from 'astro:content';
const instanceFamilyEntries = await getCollection('instance-families');
import { getInstanceComputeClass, instanceSizeSort } from '../../lib/instances';

import SiteLayout from '../../layouts/SiteLayout.astro';
import type { InstanceFamily } from '../../../generator/lib/ec2-instance-types';
---

<style>
  .tooltip {
    @apply invisible absolute;
  }

  .has-tooltip:hover .tooltip {
    @apply visible z-50;
  }
</style>

<SiteLayout title="Instances">
  <div
    id="filters"
    class="row border-b-white h-10"
  >
    <form>
      <label for="LegacyCheck">Legacy</label>
      <input
        name="LegacyCheck"
        id="LegacyCheck"
        type="checkbox"
        class="rounded"
        checked
      />
      <!-- <MultiSelectDropdown client:load prompt='Regions' formFieldName='Regions' options={["us-east-1", "ap-southeast-2"]} onChange="() => console.log('bob')" /> -->
    </form>
  </div>
  <div class="lg:w-11/12 mx-auto">
    <div class="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3">
      {
        instanceFamilyEntries.map((entry: any) => {
          const regions = entry.data.regions.sort();
          const familyName = entry.data.name;
          const instanceSizes = instanceSizeSort(entry.data.sizes);
          const instanceSizesNoMetal = instanceSizeSort(entry.data.sizes, true);
          const largestSize =
            instanceSizesNoMetal[instanceSizesNoMetal.length - 1];
          const smallestSize = instanceSizesNoMetal[0];
          const legacy = !entry.data.currentGeneration;
          const computeClass = getInstanceComputeClass(familyName);

          return (
            <div
              class={
                'max-w-sm rounded overflow-hidden shadow-lg dark:bg-slate-900 bg-slate-100' +
                (legacy ? ' ec2-legacy' : '')
              }
            >
              <div class="px-6 py-4 relative">
                <span class="inline-block bg-blue-300 dark:bg-blue-800 absolute inset-y-4 right-6 rounded-full px-3 py-1 text-xs font-semibold text-gray-800 dark:text-gray-100 mr-2 h-fit">
                  {computeClass}
                </span>
                <div class="font-bold text-xl mb-2">
                  <a href={'/ec2/' + familyName}>{familyName.toUpperCase()}</a>
                </div>
              </div>
              <div>
                <div class="px-6 pt-4 pb-2">
                  {legacy && (
                    <span class="inline-block bg-yellow-300 dark:bg-yellow-600 rounded-full px-3 py-1 text-sm font-semibold text-gray-800 dark:text-gray-100 mr-2 mb-2">
                      Legacy
                    </span>
                  )}

                  <span class="has-tooltip inline-block bg-gray-300 dark:bg-gray-700 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 dark:text-gray-300 mr-2 mb-2">
                    <span class="tooltip rounded shadow-lg p-2 mt-8 -ml-3 bg-slate-500">
                      <ul>
                        {regions.map((region: string) => (
                          <li>{region}</li>
                        ))}
                      </ul>
                    </span>
                    regions - {regions.length}
                  </span>

                  {instanceSizes.length > 0 && (
                    <span class="has-tooltip inline-block bg-gray-300 dark:bg-gray-700 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 dark:text-gray-300 mr-2 mb-2">
                      <span class="tooltip rounded shadow-lg p-2 mt-8 -ml-3 bg-slate-500">
                        <ul>
                          {instanceSizes.map((s: string) => (
                            <li>{s}</li>
                          ))}
                        </ul>
                      </span>
                      {smallestSize} - {largestSize}
                    </span>
                  )}
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</SiteLayout>

<script>
  const LegacyCheck = document.getElementById(
    'LegacyCheck',
  ) as HTMLInputElement;
  LegacyCheck.addEventListener('change', () => {
    const LegacyCards = document.getElementsByClassName('ec2-legacy');
    for (let i = 0; i < LegacyCards.length; i++) {
      if (LegacyCheck.checked) {
        LegacyCards.item(i)?.classList.remove('hidden');
      } else {
        LegacyCards.item(i)?.classList.add('hidden');
      }
    }
  });
</script>
